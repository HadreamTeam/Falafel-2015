package org.usfirst.frc.team3075.robot.subsystems;

import libPurple.utils;

import org.usfirst.frc.team3075.robot.Components;
import org.usfirst.frc.team3075.robot.Constants;
import org.usfirst.frc.team3075.robot.Robot;
import org.usfirst.frc.team3075.robot.commands.JoyStickArcadeDrive;

import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

public class DriveSystem extends Subsystem{
	
	private boolean	runPID = true;
	private double turnSensitivity = 1;
	
	public DriveSystem() {
		// TODO Auto-generated constructor stub
		//Initialize driving motors

	}
	
	@Override
	protected void initDefaultCommand() {
		setDefaultCommand(new JoyStickArcadeDrive());
	}
	
	public void rawArcadeDrive(double y, double x)
	{
		Components.driveLeft.disable();
		Components.driveRight.disable();
		
		double[] driveValues = utils.arcadeDrive(y, x, turnSensitivity);
		Components.driveLeft.setRaw(driveValues[0]);
		Components.driveLeft.setRaw(driveValues[1]);

		
		
	}
	
	public void arcadeDrive(double y, double x)
	{
		double[] driveValues = utils.arcadeDrive(y, x);
		if(runPID)
		{
			Components.driveLeft.enable();
			Components.driveRight.enable();

			Components.driveLeft.setReturnRate(true);
			Components.driveRight.setReturnRate(true);
		
			SmartDashboard.putNumber("l", driveValues[0]);
			SmartDashboard.putNumber("r", driveValues[1]);

			Components.driveLeft.setSetpoint(driveValues[0]*Constants.maxSpeed);
			Components.driveRight.setSetpoint(driveValues[1]*Constants.maxSpeed);
		}
		else
		{
			Components.driveLeft.setRaw(driveValues[0]);
			Components.driveRight.setRaw(driveValues[1]);
		}
	}
	
	public void driveDistance(double targetRight, double targetLeft)
	{
		Components.driveLeft.enable();
		Components.driveRight.enable();

		Components.driveLeft.setReturnRate(false);
		Components.driveRight.setReturnRate(false);
		
		Components.driveLeft.setSetpoint(targetLeft);
		Components.driveRight.setSetpoint(targetRight);
	}
	
	public double getDistAverage()
	{
		return (getDistLeft() + getDistRight()) / 2;
	}
	
	public double getRateAverage()
	{
		return (Components.driveLeftEncoder.getRate() + Components.driveRightEncoder.getRate()) / 2;
	}
	
	public double getDistRight()
	{
		return Components.driveRightEncoder.getDistance();
	}
	
	public double getDistLeft()
	{
		return Components.driveLeftEncoder.getDistance();
	}
	
	public double getAngle()
	{
		return getAngleRight() + getAngleLeft();
	}
	
	private double getAngleRight()
	{
		return 1 * Components.driveRightEncoder.getDistance() / Constants.robotWidth * 360 / (2 * Math.PI);
	}
	
	private double getAngleLeft()
	{
		return -1 * Components.driveLeftEncoder.getDistance() / Constants.robotWidth * 360 / (2 * Math.PI);
	}
	
	public void setRunPID(boolean toRun)
	{
		runPID = toRun;
		if(runPID)
		{
			 Components.driveLeft.enable();
			 Components.driveRight.enable();
		}
		else
		{
			 Components.driveLeft.disable();
			 Components.driveRight.disable();
		}
	}
	
	public void setAccellimit(double newAccellimit)
	{
		Components.driveLeft.setAccellimit(newAccellimit);
		Components.driveRight.setAccellimit(newAccellimit);
	}
	
	public void setTurningSensitivity(double sensitivity)
	{
		turnSensitivity = sensitivity;
	}
}
