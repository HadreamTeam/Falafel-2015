package libPurple;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;
/**
 *  						*** 3075 ***
 *  This class is our generic drive system. It includes:
 *  PID (by distance)
 *  PID (by speed)
 */
public class DriveSystem3075 extends Subsystem 
{
	SpeedController3075[] driveLeft = new SpeedController3075[2];
	SpeedController3075[] driveRight = new SpeedController3075[2];
	
	Encoder encoderRight;
	Encoder encoderLeft;
	
//	PIDController pidRightDist;
//	PIDController pidLeftDist;
//	PIDController pidDiffDist;
	
	PIDController pidRightRate;
	PIDController pidLeftRate;
//	PIDController pidDiffRate;
	
	double maxSpeed = 1;
	
	public void initDefaultCommand() {
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
	
    public DriveSystem3075(SpeedController3075[] driveLeft, Encoder encoderLeft,
    		SpeedController3075[] driveRight, Encoder encoderRight)
    {
		super();
		this.driveLeft = driveLeft;
		this.driveRight = driveRight;
		this.encoderLeft = encoderLeft;
		this.encoderRight = encoderRight;
		
		driveLeft[0].setSlave(driveLeft[1]);
		driveRight[0].setSlave(driveRight[1]);
	}
    
    public DriveSystem3075(SpeedController3075 rearLeft, SpeedController3075 frontLeft, Encoder encoderLeft,
    		SpeedController3075 rearRight, SpeedController3075 frontRight, Encoder encoderRight)
    {
		super();
		driveLeft[0] = rearLeft;
		driveLeft[1] = frontLeft;
		driveRight[0] = rearRight;
		driveRight[1] = frontRight;
		
		this.encoderLeft = encoderLeft;
		this.encoderRight = encoderRight;
		
		driveLeft[0].setSlave(driveLeft[1]);
		driveRight[0].setSlave(driveRight[1]);
	}
    
    public DriveSystem3075(int rearLeft, int frontLeft, Encoder encoderLeft, int rearRight, int frontRight, Encoder encoderRight)
    {
		super();
		driveLeft[0] = new Victor3075(rearLeft);
		driveLeft[1] = new Victor3075(frontLeft);
		driveRight[0] = new Victor3075(rearRight);
		driveRight[1] = new Victor3075(frontRight);
		this.encoderLeft = encoderLeft;
		this.encoderRight = encoderRight;
		
		driveLeft[0].setSlave(driveLeft[1]);
		driveRight[0].setSlave(driveRight[1]);
		
	}
    
    public void setPID(double p, double i, double d)
    {
    	pidLeftRate = new PIDController(p, i, d, encoderLeft, driveLeft[0]);
    	pidRightRate = new PIDController(p, i, d, encoderRight, driveRight[0]);
    }
    
    public void enablePID()
    {
    	pidLeftRate.enable();
    	pidRightRate.enable();
    }
    
    public void setTankDrive(double leftSpeed, double rightSpeed)
    {
    	setLeft(leftSpeed);
    	setRight(rightSpeed);
    }
    
    public void setTankDrive(double[] speed)
    {
    	setLeft(speed[0]);
    	setRight(speed[1]);
    }
    
    public void setArcadeDrive(double moveSpeed, double rotateSpeed)
    {
    	setTankDrive(utils.arcadeDrive(moveSpeed, rotateSpeed));
    }
    
    public void setLeft(double speed)
    {
    	if(pidLeftRate != null && pidLeftRate.isEnable())
    	{
    		pidLeftRate.setSetpoint(speed * maxSpeed);
    		speed += pidLeftRate.get();
    	}
    	driveLeft[0].set(speed);
    }
    
    public void setRight(double speed)
    {
    	if(pidRightRate != null && pidRightRate.isEnable())
    	{
    		pidRightRate.setSetpoint(speed * maxSpeed);
    		speed += pidRightRate.get();
    	}
    	driveRight[0].set(speed);
    }

	public double getMaxSpeed() {
		return maxSpeed;
	}

	/**
	 * 
	 * @param maxSpeed should be the weak robot side's max speed
	 */
	public void setMaxSpeed(double maxSpeed) {
		this.maxSpeed = maxSpeed;
	}

	// Put methods for controlling this subsystem
    // here. Call these from Commands.
    
    
    
    
}

class DriveDistance extends Command{
	
	public DriveDistance(double dist)
	{
	}
	
	@Override
	protected void initialize() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void execute() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected boolean isFinished() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected void end() {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void interrupted() {
		// TODO Auto-generated method stub
		
	}
	
}
