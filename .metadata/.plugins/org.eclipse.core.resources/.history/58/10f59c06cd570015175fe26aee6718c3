
package org.usfirst.frc.team3075.robot;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.livewindow.LiveWindowSendable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc.team3075.robot.commands.Drive;
import org.usfirst.frc.team3075.robot.commands.ExampleCommand;
import org.usfirst.frc.team3075.robot.subsystems.ExampleSubsystem;
import org.usfirst.frc.team3075.robot.subsystems.ForkLift;
import org.usfirst.frc.team3075.robot.subsystems.driveSystem;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	
	public static driveSystem DriveSystem = new driveSystem();
	public static Subsystem exampleSubsystem = new ExampleSubsystem();
	public static ForkLift forkLift = new ForkLift();
	public static OI oi;
	public SmartDashboard dash;

    Command autonomousCommand;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	oi = new OI();
        // instantiate the command used for the autonomous period
        autonomousCommand = new Drive(0.50);
        RobotMap.init();
        dash = new SmartDashboard();
//        oi.stick.setDeadBand(0.3);
//        oi.stick.setMotorBound(0.3);
        
    }
	
	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
        
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        SmartDashboard.putNumber("encoder0", RobotMap.e0.getDistance());
        SmartDashboard.putNumber("encoder1", RobotMap.e1.getDistance());
    
    }

    public void teleopInit() {
		// This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
        RobotMap.t2.setPosition(0);
        
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    public void disabledInit(){

    }

    /**
     * This function is called periodically during operator control
     */
	public void teleopPeriodic() {
    	
        Scheduler.getInstance().run();
        update();
        /**
         * teleop
         */
        
        save();
        SmartDashboard.putNumber("JoyX", oi.getJoystickDrive().xValue());
        SmartDashboard.putNumber("JoyY", oi.getJoystickDrive().yValue());
        SmartDashboard.putNumber("liftX", oi.getJoystickSystem().xValue());
        SmartDashboard.putNumber("liftY", oi.getJoystickSystem().yValue());
        SmartDashboard.putNumber("encoder0", RobotMap.e0.getDistance());
        SmartDashboard.putNumber("encoder1", RobotMap.e1.getDistance());
        
        SmartDashboard.putNumber("AccelX", oi.accelsior.getX());
        SmartDashboard.putNumber("AccelY", oi.accelsior.getY());
        SmartDashboard.putNumber("AccelZ", oi.accelsior.getZ());

        SmartDashboard.putNumber("AccelRawX", oi.accelsior.getRawX());
        SmartDashboard.putNumber("AccelRawY", oi.accelsior.getRawY());
        SmartDashboard.putNumber("AccelRawZ", oi.accelsior.getRawZ());
        
        SmartDashboard.putNumber("SpeedX", oi.accelsior.getSpeedX());
        SmartDashboard.putNumber("SpeedY", oi.accelsior.getSpeedY());
        SmartDashboard.putNumber("SpeedZ", oi.accelsior.getSpeedZ());

    }
    
    /**
     * This function is called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
    
    public void update()
    {
        oi.update();

    }
    
    public void save()
    {
        oi.save();

    }
}
